/* div {
    width: 40%;
    padding-left: .5rem;
    margin-left: .5rem;
    float: right;
    box-shadow: inset 5px 0 5px -5px #29627e;
    font-style: italic;
    color: #29627e;
} */
body {
    background-color: rgb(49, 15, 15);
}
.testclass {
    /* background-color: orange; */
    border:2px dotted rgb(21, 179, 190);
}
.otherclass {
    float:right;
}
div > p {
    margin: .5rem;
}

p {
    font-family: 'Fira Sans', sans-serif;
    text-align: center;
    background: purple;
}

/* attribute selector: */
[contenteditable] {
    outline:0px solid transparent;
}

/* <p> elements with an id of "main" and with classes of firstClass and secondClass
p#main.firstClass.secondClass {...} */

/* targets all div tags that are direct children of p: (child combinator)
p > div {...} */

/* targets all div tags of p, whether direct or indirect: (descendant combinator)
main div {...} */


/* div .row * {... => all elements that are descendants / child of the div elements and row class.

li + a {... => adjacent sibling combinator: the first 'a' after each 'li'. 

span, div {... => all 'span' and all 'div' elements

div.small {... => select the divs with the 'small' class

li ~ div {... => sibling combinator: selects all 'div' elements following (& on the same level as) a 'li' element.  */

/*
Attribute selectors: 
[attribute]
selector[attribute] 
[attribute="value"]
----
[src] => any element that has an src attribute
img[src] => any img elements that have a src attribute
img[src="puppy.jpg"]
[attribute^="value"] - ^= Will match strings from the start.
[attribute$="value"] - $= Will match strings from the end.
[attribute*="value"] - *= The wildcard selector will match anywhere
Attribute Hyphenated Selector: 
a[lang|="en"] {...} => may be hyphen-seperated, but must come first, ex: <a href="#" lang="en-US">...</a>
----
[src$='.jpg']
a[href*="example"]
a[title]
a[class~="logo"] => <a> elements whose class attribute contains the word "logo"

----Vertical align radio button && CSS selector
input[type="radio"] {
    margin-top: -1px;
    vertical-align: middle;
}

/* pseudo-classes: 
mybutton:hover
#mydiv:first-child{...
input:invalid
:fullscreen ; :modal ; :picture-in-picture ; :link ; :playing ; :root ; :nth-child ; 
:active ; :focus; 
input:enabled ; input:disabled ; input:checked
.styledSelect:not(:focus-within) input:not(:checked) + label
With forms: 
:invalid, :valid, :required
*/

/* pseudo-elements, used to style a specific part of the element: 
div::first-line 
video::backdrop 
::first-line
section p:first-child::first-line

pseudo-elements used as generated content:
::before
::after
::marker
::selection
blockquote::before {content: open-quote;}

*/

/* .box[style] {...} target all elements with class 'box', and who have a style="..." attribute set  */

/* display:flow-root  => when you want to float 2 or more elemnts, and prevent over-flowing, or margins collapsing */
 
/*
The new clearfix "hack" is safer than "overflow: auto":
.clearfix::after {
    content: "";
    clear: both;
    display:
    
Media queries:
@media all and (min-width: 800px) and (max-width: 1024px) {...}
@media only screen and (orientation: portrait) {...}
@media all and (min-device-aspect-ratio: 16/9) {...}

//min-content is the smallest size a box can take without overflowing its content.

When wanting to limit the area where an iteraction occurs, e.g. a hover:
pointer-events: none;


